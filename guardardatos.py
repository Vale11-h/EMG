# -*- coding: utf-8 -*-
"""GuardarDatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k4fZicB1Q7OAPj6VnbweGSkvk61whJbZ
"""

import sys
import nidaqmx
import datetime
import time
import numpy as np
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QFileDialog
from PyQt6.QtCore import QTimer
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class DAQApp(QMainWindow):
    def _init_(self):
        super()._init_()

        # Configuración de la ventana
        self.setWindowTitle("DAQ ECG Monitor")
        self.setGeometry(100, 100, 800, 600)

        # Crear layout principal
        layout = QVBoxLayout()

        # Botones
        self.start_button = QPushButton("Iniciar")
        self.stop_button = QPushButton("Detener")
        self.save_button = QPushButton("Guardar Datos")

        self.start_button.clicked.connect(self.iniciar_adquisicion)
        self.stop_button.clicked.connect(self.detener_adquisicion)
        self.save_button.clicked.connect(self.guardar_datos)

        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)
        layout.addWidget(self.save_button)

        # Gráfica
        self.fig = Figure()
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvas(self.fig)
        layout.addWidget(self.canvas)

        # Contenedor central
        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

        # Variables de adquisición
        self.task = None
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.adquirir_dato)
        self.x_data = []
        self.y_data = []
        self.start_time = None

    def iniciar_adquisicion(self):
        """Inicia la adquisición de datos desde la DAQ"""
        self.task = nidaqmx.Task()
        self.task.ai_channels.add_ai_voltage_chan("Dev1/ai0")  # Cambia según tu DAQ
        self.start_time = time.time()
        self.x_data = []
        self.y_data = []
        self.timer.start(10)  # Ajusta la velocidad de adquisición (10 ms = 100 Hz)
        print("Adquisición iniciada...")

    def detener_adquisicion(self):
        """Detiene la adquisición de datos"""
        if self.task:
            self.task.close()
        self.timer.stop()
        print("Adquisición detenida.")

    def adquirir_dato(self):
        """Lee un dato desde la DAQ y lo grafica"""
        tiempo_actual = time.time() - self.start_time
        dato = self.task.read()  # Leer dato de la DAQ

        self.x_data.append(tiempo_actual)
        self.y_data.append(dato)

        # Actualizar gráfica
        self.ax.clear()
        self.ax.plot(self.x_data, self.y_data, color='#ff5733')
        self.ax.set_xlabel('Tiempo (s)')
        self.ax.set_ylabel('Señal (V)')
        self.ax.set_title('Señal ECG en tiempo real')
        self.canvas.draw()

    def guardar_datos(self):
        """Guarda los datos adquiridos en un archivo de texto"""
        nombre_archivo, _ = QFileDialog.getSaveFileName(self, "Guardar archivo", "", "Archivos de texto (*.txt)")
        if nombre_archivo:
            with open(nombre_archivo, 'w') as f:
                f.write("Tiempo (s), Señal (V)\n")
                for i in range(len(self.x_data)):
                    f.write(f"{self.x_data[i]}, {self.y_data[i]}\n")
            print(f"Datos guardados en {nombre_archivo}")

if _name_ == "_main_":
    app = QApplication(sys.argv)
    ventana = DAQApp()
    ventana.show()
    sys.exit(app.exec())



